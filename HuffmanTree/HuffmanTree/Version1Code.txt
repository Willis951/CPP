
/* Object will be used to compare the weight values of two nodes 
   This will order our heap */
struct comp
{
	bool operator()(HT_Node* lc, HT_Node* rc)
	{
		return lc->weight > rc->weight;
	}
};

void fill_huffmanCode(HT_Node* root, string str)
{
	if (root == nullptr)
		return;

	if (!root->lc && !root->rc) {
		huffmanCode[root->ch] = str;
	}

	fill_huffmanCode(root->lc, str + "0");
	fill_huffmanCode(root->rc, str + "1");
}

void buildHuffmanTree()
{
	/* We will use a priority queue to store the nodes of Huffman Tree */
	priority_queue<HT_Node*, vector<HT_Node*>, comp> pq;

	/* Each char will be placed into a leaf node, and added to priority queue */
	for (auto pair : frequency_map) {
		pq.push(create_node(pair.first, pair.second, nullptr, nullptr));
	}

	/* While loop will remove leaf nodes and join them in a tree */
	while (pq.size() != 1) {
		/* Remove the two nodes with highest priority */
		/* The lower frequency the higher the prioriry */
		HT_Node* left = pq.top();
		pq.pop();
		HT_Node* right = pq.top();
		pq.pop();

		/* New internal node will be created with previous two nodes as children */
		/* Internal node frequency is equal to the sum of children frequencies */
		/* Add new internal node to the priority queue */
		int sum = left->weight + right->weight;
		pq.push(create_node('\0', sum, left, right));
	}

	/* Root node is the pointer to the top of the Huffman Tree */
	HT_Node* root = pq.top();

	/* Now we traverse the Huffman Tree and place Huffman Codes in a map */
	fill_huffmanCode(root, "");
}

char* encode(char* text) {
	buildHuffmanTree();
	string temp(text);
	// print encoded string
	string str = "";
	for (char ch : temp) {
		str += huffmanCode[ch];
	}

	char code[50];
	str.copy(code, str.length());
	cout << code << endl;
	return code;
}